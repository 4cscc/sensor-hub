services:

  Dashboard:

    cap_drop:
      - "AUDIT_CONTROL"
      - "BLOCK_SUSPEND"
      - "DAC_READ_SEARCH"
      - "IPC_LOCK"
      - "IPC_OWNER"
      - "LEASE"
      - "LINUX_IMMUTABLE"
      - "MAC_ADMIN"
      - "MAC_OVERRIDE"
      - "NET_ADMIN"
      - "NET_BROADCAST"
      - "SYSLOG"
      - "SYS_ADMIN"
      - "SYS_BOOT"
      - "SYS_MODULE"
      - "SYS_NICE"
      - "SYS_PACCT"
      - "SYS_PTRACE"
      - "SYS_RAWIO"
      - "SYS_RESOURCE"
      - "SYS_TIME"
      - "SYS_TTY_CONFIG"
      - "WAKE_ALARM"

    container_name: "Dashboard"

    entrypoint:
      - "/run.sh"

    environment:
      - "PATH=/usr/share/grafana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      - "GF_PATHS_CONFIG=/etc/grafana/grafana.ini"
      - "GF_PATHS_DATA=/var/lib/grafana"
      - "GF_PATHS_HOME=/usr/share/grafana"
      - "GF_PATHS_LOGS=/var/log/grafana"
      - "GF_PATHS_PLUGINS=/var/lib/grafana/plugins"
      - "GF_PATHS_PROVISIONING=/etc/grafana/provisioning"

    expose:
      - "3000/tcp"

    hostname: "sensor_hub"

    image: "grafana/grafana:latest"

    ipc: "private"

    labels:
      maintainer: "Grafana Labs <hello@grafana.com>"

    logging:
      driver: "json-file"
      options: {}

    network_mode: "host"

    restart: "always"

    stdin_open: true

    user: "472"

    working_dir: "/usr/share/grafana"

  Sensor_Data:

    cap_drop:
      - "AUDIT_CONTROL"
      - "BLOCK_SUSPEND"
      - "DAC_READ_SEARCH"
      - "IPC_LOCK"
      - "IPC_OWNER"
      - "LEASE"
      - "LINUX_IMMUTABLE"
      - "MAC_ADMIN"
      - "MAC_OVERRIDE"
      - "NET_ADMIN"
      - "NET_BROADCAST"
      - "SYSLOG"
      - "SYS_ADMIN"
      - "SYS_BOOT"
      - "SYS_MODULE"
      - "SYS_NICE"
      - "SYS_PACCT"
      - "SYS_PTRACE"
      - "SYS_RAWIO"
      - "SYS_RESOURCE"
      - "SYS_TIME"
      - "SYS_TTY_CONFIG"
      - "WAKE_ALARM"

    command:
      - "influxd"

    container_name: "Sensor_Data"

    entrypoint:
      - "/entrypoint.sh"

    environment:
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      - "INFLUXDB_VERSION=1.8.4"

    expose:
      - "8086/tcp"

    hostname: "sensor_hub"

    # Need to figure out how to build for multiple architectures
    image: "arm32v7/influxdb"

    ipc: "private"

    logging:
      driver: "json-file"
      options: {}

    network_mode: "host"

    restart: "always"

    stdin_open: true

    volumes:
      - "influx_volume:/var/lib/influxdb"

  mqtt:

    cap_drop:
      - "AUDIT_CONTROL"
      - "BLOCK_SUSPEND"
      - "DAC_READ_SEARCH"
      - "IPC_LOCK"
      - "IPC_OWNER"
      - "LEASE"
      - "LINUX_IMMUTABLE"
      - "MAC_ADMIN"
      - "MAC_OVERRIDE"
      - "NET_ADMIN"
      - "NET_BROADCAST"
      - "SYSLOG"
      - "SYS_ADMIN"
      - "SYS_BOOT"
      - "SYS_MODULE"
      - "SYS_NICE"
      - "SYS_PACCT"
      - "SYS_PTRACE"
      - "SYS_RAWIO"
      - "SYS_RESOURCE"
      - "SYS_TIME"
      - "SYS_TTY_CONFIG"
      - "WAKE_ALARM"

    command:
      - "/usr/sbin/mosquitto"
      - "-c"
      - "/mosquitto/config/mosquitto.conf"

    container_name: "mqtt"

    entrypoint:
      - "/docker-entrypoint.sh"

    environment:
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      - "VERSION=2.0.15"
      - "DOWNLOAD_SHA256=4735b1d32e3f91c7a8896741d88a3022e89730a1ee897946decfa0df27039ac6"
      - "GPG_KEYS=A0D6EEA1DCAE49A635A3B2F0779B22DFB3E717B7"
      - "LWS_VERSION=4.2.1"
      - "LWS_SHA256=842da21f73ccba2be59e680de10a8cce7928313048750eb6ad73b6fa50763c51"

    expose:
      - "1883/tcp"

    hostname: "sensor_hub"

    image: "eclipse-mosquitto:latest"

    ipc: "private"

    labels:
      description: "Eclipse Mosquitto MQTT Broker"
      maintainer: "Roger Light <roger@atchoo.org>"

    logging:
      driver: "json-file"
      options: {}

    network_mode: "host"

    restart: "always"

    stdin_open: true

    volumes:
      - "mqtt_config:/mosquitto/config"
      - "mqtt_data:/mosquitto/data"
      - "mqtt_log:/mosquitto/log"

  node_red:

    cap_drop:
      - "AUDIT_CONTROL"
      - "BLOCK_SUSPEND"
      - "DAC_READ_SEARCH"
      - "IPC_LOCK"
      - "IPC_OWNER"
      - "LEASE"
      - "LINUX_IMMUTABLE"
      - "MAC_ADMIN"
      - "MAC_OVERRIDE"
      - "NET_ADMIN"
      - "NET_BROADCAST"
      - "SYSLOG"
      - "SYS_ADMIN"
      - "SYS_BOOT"
      - "SYS_MODULE"
      - "SYS_NICE"
      - "SYS_PACCT"
      - "SYS_PTRACE"
      - "SYS_RAWIO"
      - "SYS_RESOURCE"
      - "SYS_TIME"
      - "SYS_TTY_CONFIG"
      - "WAKE_ALARM"

    container_name: "node_red"

    entrypoint:
      - "./entrypoint.sh"

    environment:
      - "PATH=/usr/src/node-red/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      - "NODE_VERSION=16.16.0"
      - "YARN_VERSION=1.22.19"
      - "NODE_RED_VERSION=v3.0.2"
      - "NODE_PATH=/usr/src/node-red/node_modules:/data/node_modules"
      - "FLOWS=flows.json"

    expose:
      - "1880/tcp"

    hostname: "sensor_hub"

    image: "nodered/node-red:latest"

    ipc: "private"

    labels:
      authors: "Dave Conway-Jones, Nick O'Leary, James Thomas, Raymond Mouthaan"
      org.label-schema.arch: ""
      org.label-schema.build-date: "2022-08-04T13:19:23Z"
      org.label-schema.description: "Low-code programming for event-driven applications."
      org.label-schema.docker.dockerfile: ".docker/Dockerfile.alpine"
      org.label-schema.license: "Apache-2.0"
      org.label-schema.name: "Node-RED"
      org.label-schema.url: "https://nodered.org"
      org.label-schema.vcs-ref: ""
      org.label-schema.vcs-type: "Git"
      org.label-schema.vcs-url: "https://github.com/node-red/node-red-docker"
      org.label-schema.version: "3.0.2"

    logging:
      driver: "json-file"
      options: {}

    network_mode: "host"

    restart: "always"

    user: "node-red"

    volumes:
      - "node_red_data:/data"

    working_dir: "/usr/src/node-red"

  portainer:

    container_name: "portainer"

    entrypoint:
      - "/portainer"

    environment:
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    hostname: "sensor_hub"

    image: "portainer/portainer-ce:latest"

    ipc: "private"

    labels:

      com.docker.desktop.extension.api.version: ">= 0.2.2"

      com.docker.desktop.extension.icon: "https://portainer-io-assets.sfo2.cdn.digitaloceanspaces.com/logos/portainer.png"

      com.docker.extension.additional-urls: "[{\"title\":\"Website\",\"url\":\"https://www.portainer.io?utm_campaign=DockerCon&utm_source=DockerDesktop\"\
        },{\"title\":\"Documentation\",\"url\":\"https://docs.portainer.io\"},{\"\
        title\":\"Support\",\"url\":\"https://join.slack.com/t/portainer/shared_invite/zt-txh3ljab-52QHTyjCqbe5RibC2lcjKA\"\
        }]"

      com.docker.extension.detailed-description: "<p data-renderer-start-pos=\"226\"\
        >Portainer&rsquo;s Docker Desktop extension gives you access to all of Portainer&rsquo;s\
        \ rich management functionality within your docker desktop experience.</p><h2\
        \ data-renderer-start-pos=\"374\">With Portainer you can:</h2><ul><li>See\
        \ all your running containers</li><li>Easily view all of your container logs</li><li>Console\
        \ into containers</li><li>Easily deploy your code into containers using a\
        \ simple form</li><li>Turn your YAML into custom templates for easy reuse</li></ul><h2\
        \ data-renderer-start-pos=\"660\">About Portainer&nbsp;</h2><p data-renderer-start-pos=\"\
        680\">Portainer is the worlds&rsquo; most popular universal container management\
        \ platform with more than 650,000 active monthly users. Portainer can be used\
        \ to manage Docker Standalone, Kubernetes, Docker Swarm and Nomad environments\
        \ through a single common interface. It includes a simple GitOps automation\
        \ engine and a Kube API.&nbsp;</p><p data-renderer-start-pos=\"1006\">Portainer\
        \ Business Edition is our fully supported commercial grade product for business-wide\
        \ use. It includes all the functionality that businesses need to manage containers\
        \ at scale. Visit <a class=\"sc-jKJlTe dPfAtb\" href=\"http://portainer.io/\"\
        \ title=\"http://Portainer.io\" data-renderer-mark=\"true\">Portainer.io</a>\
        \ to learn more about Portainer Business and <a class=\"sc-jKJlTe dPfAtb\"\
        \ href=\"http://portainer.io/take5?utm_campaign=DockerCon&amp;utm_source=Docker%20Desktop\"\
        \ title=\"http://portainer.io/take5?utm_campaign=DockerCon&amp;utm_source=Docker%20Desktop\"\
        \ data-renderer-mark=\"true\">get 5 free nodes.</a></p>"

      com.docker.extension.publisher-url: "https://www.portainer.io"

      com.docker.extension.screenshots: "[{\"alt\": \"screenshot one\", \"url\": \"\
        https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-1.png\"\
        },{\"alt\": \"screenshot two\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-2.png\"\
        },{\"alt\": \"screenshot three\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-3.png\"\
        },{\"alt\": \"screenshot four\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-4.png\"\
        },{\"alt\": \"screenshot five\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-5.png\"\
        },{\"alt\": \"screenshot six\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-6.png\"\
        },{\"alt\": \"screenshot seven\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-7.png\"\
        },{\"alt\": \"screenshot eight\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-8.png\"\
        },{\"alt\": \"screenshot nine\", \"url\": \"https://portainer-io-assets.sfo2.digitaloceanspaces.com/screenshots/docker-extension-9.png\"\
        }]"

      io.portainer.server: "true"

      org.opencontainers.image.description: "Docker container management made simple,\
        \ with the world’s most popular GUI-based container management platform."

      org.opencontainers.image.title: "Portainer"

      org.opencontainers.image.vendor: "Portainer.io"

    logging:
      driver: "json-file"
      options: {}

    mac_address: "02:42:ac:11:00:02"

    network_mode: "bridge"

    ports:
      - "8000:8000/tcp"
      - "9443:9443/tcp"

    restart: "always"

    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock

    working_dir: "/"

version: "3.6"

volumes:
  influx_volume:
  mqtt_config:
  mqtt_data:
  mqtt_log:
  node_red_data:
  portainer_data:
